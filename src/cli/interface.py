import logging
from datetime import datetime
from typing import Any, Dict, List

from config.settings import MESSAGES, EMOJIS, DISPLAY_WIDTH
from src.main import VacancyManager
from src.core.models import Vacancy


# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

def display_vacancy(vacancy: Vacancy) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    salary = vacancy.salary
    salary_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if salary:
        if salary.from_amount and salary.to_amount:
            salary_str = f"{salary.from_amount} - {salary.to_amount} {salary.currency}"
        elif salary.from_amount:
            salary_str = f"–æ—Ç {salary.from_amount} {salary.currency}"
        elif salary.to_amount:
            salary_str = f"–¥–æ {salary.to_amount} {salary.currency}"

    print(f"\n{EMOJIS['vacancy']} {vacancy.name}")
    print(f"   {EMOJIS['company']} –ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}")
    print(f"   {EMOJIS['salary']} –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_str}")
    print(f"   {EMOJIS['city']} –ì–æ—Ä–æ–¥: {vacancy.area}")
    print(f"   {EMOJIS['experience']} –û–ø—ã—Ç: {vacancy.experience}")
    print(f"   {EMOJIS['link']} –°—Å—ã–ª–∫–∞: {vacancy.url}")
    print(f"   {EMOJIS['date']} –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {vacancy.published_at[:10]}")
    print("-" * DISPLAY_WIDTH)


def display_vacancies(vacancies: List[Vacancy]) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    if not vacancies:
        print(MESSAGES["no_vacancies"])
        return

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    for i, vacancy in enumerate(vacancies, 1):
        print(f"\n{i}. ", end="")
        display_vacancy(vacancy)


def get_manual_vacancy_input() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Ä—É—á–Ω—É—é")
    print("=" * 50)

    vacancy_data: Dict[str, Any] = {
        "name": input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ").strip(),
        "company": input("–ö–æ–º–ø–∞–Ω–∏—è: ").strip(),
        "area": input("–ì–æ—Ä–æ–¥: ").strip(),
        "url": input("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: ").strip(),
        "experience": input("–¢—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç: ").strip(),
        "employment": input("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ").strip(),
        "snippet": input("–û–ø–∏—Å–∞–Ω–∏–µ: ").strip(),
        "published_at": datetime.now().isoformat(),
        "salary": {},
    }

    # –î–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    salary_from = input("–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç (–∏–ª–∏ Enter —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
    salary_to = input("–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ (–∏–ª–∏ Enter —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
    currency = input("–í–∞–ª—é—Ç–∞ (RUB/USD/EUR, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB): ").strip() or "RUB"

    if salary_from:
        vacancy_data["salary"]["from"] = int(salary_from)
    if salary_to:
        vacancy_data["salary"]["to"] = int(salary_to)
    vacancy_data["salary"]["currency"] = currency

    return vacancy_data


def run_cli() -> None:
    """–ó–∞–ø—É—Å–∫ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print(MESSAGES["welcome"])
    print("=" * DISPLAY_WIDTH)

    manager = VacancyManager()

    while True:
        print("\n" + "=" * DISPLAY_WIDTH)
        print("üéØ –ú–ï–ù–ï–î–ñ–ï–† –í–ê–ö–ê–ù–°–ò–ô HH.RU")
        print("=" * DISPLAY_WIDTH)
        print(f"1. {EMOJIS['search']} –ü–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru")
        print(f"2. {EMOJIS['add']} –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤—Ä—É—á–Ω—É—é")
        print(f"3. {EMOJIS['view']} –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print(f"4. {EMOJIS['filter']} –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏")
        print(f"5. {EMOJIS['delete']} –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
        print(f"6. {EMOJIS['export']} –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        print(f"7. {EMOJIS['export']} –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        print(f"8. {EMOJIS['export']} –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
        print(f"9. {EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print(f"10. {EMOJIS['clear']} –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print(f"11. {EMOJIS['exit']} –í—ã—Ö–æ–¥")
        print("=" * DISPLAY_WIDTH)

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-11): ").strip()

        if choice == "1":
            try:
                query = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä 'Python developer'): ").strip()
                if not query:
                    print("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue

                count_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20, –º–∞–∫—Å 100): ").strip()
                count = min(int(count_input) if count_input.isdigit() else 20, 100)

                print(f"{EMOJIS['search']} –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π '{query}'...")
                added_count = manager.search_and_add_vacancies(query, count)

                if added_count == 0:
                    print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                else:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")

            except Exception as e:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å: –∏—Å–ø–æ–ª—å–∑—É–µ–º logger –≤–º–µ—Å—Ç–æ input.error
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
                print(MESSAGES["error_api"].format(e))
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º")

        elif choice == "2":
            try:
                vacancy_data = get_manual_vacancy_input()
                success = manager.add_manual_vacancy(vacancy_data)
                if success:
                    print(MESSAGES["vacancy_added"])
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
                print(MESSAGES["error_general"].format(e))

        elif choice == "3":
            vacancies: List[Vacancy] = manager.get_vacancies()
            display_vacancies(vacancies)

        elif choice == "4":
            print("\nüéõÔ∏è  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–π (–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")
            filters: Dict[str, Any] = {}

            company = input("–ö–æ–º–ø–∞–Ω–∏—è: ").strip()
            if company:
                filters["company"] = company

            area = input("–ì–æ—Ä–æ–¥: ").strip()
            if area:
                filters["area"] = area

            min_salary = input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ").strip()
            if min_salary and min_salary.isdigit():
                filters["min_salary"] = int(min_salary)

            experience = input("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ").strip()
            if experience:
                filters["experience"] = experience

            employment = input("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ").strip()
            if employment:
                filters["employment"] = employment

            filtered_results: List[Vacancy] = manager.get_vacancies(filters)
            display_vacancies(filtered_results)

        elif choice == "5":
            all_vacancies: List[Vacancy] = manager.get_vacancies()  # –ú–µ–Ω—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if not all_vacancies:
                print("‚ùå –ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                continue

            display_vacancies(all_vacancies)
            try:
                idx_input = input("\n–ù–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
                if not idx_input.isdigit():
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                    continue

                idx = int(idx_input) - 1
                if 0 <= idx < len(all_vacancies):
                    vacancy_id = all_vacancies[idx].id
                    if manager.delete_vacancy(vacancy_id):
                        print(MESSAGES["vacancy_deleted"])
                    else:
                        print("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

        elif choice == "6":
            try:
                filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é vacancies.xlsx): ").strip()
                filename = filename if filename else "vacancies.xlsx"

                if not filename.endswith(".xlsx"):
                    filename += ".xlsx"

                filepath = manager.export_to_excel(filename)
                print(MESSAGES["export_success"].format(filepath))
            except Exception as e:
                print(MESSAGES["error_export"].format(e))

        elif choice == "7":
            try:
                filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é vacancies.csv): ").strip()
                filename = filename if filename else "vacancies.csv"
                filepath = manager.export_to_csv(filename)
                print(MESSAGES["export_success"].format(filepath))
                print("üí° –°–æ–≤–µ—Ç: –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Excel —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8")
            except Exception as e:
                print(MESSAGES["error_export"].format(e))

        elif choice == "8":
            try:
                filename = input("–ò–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é vacancies.json): ").strip()
                filename = filename if filename else "vacancies.json"
                filepath = manager.export_to_json(filename)
                print(MESSAGES["export_success"].format(filepath))
            except Exception as e:
                print(MESSAGES["error_export"].format(e))

        elif choice == "9":
            stats = manager.get_statistics()
            if not stats:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                continue

            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–ö–ê–ù–°–ò–ô")
            print("=" * 40)
            print(f"–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {stats['total']}")
            print(f"–° —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–∞: {stats['with_salary']}")
            print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {dict(stats['sources'])}")

            print("\nüè¢ –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π:")
            for company, count in stats["by_company"].most_common(5):
                print(f"  {company}: {count}")

            print("\nüìç –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤:")
            for area, count in stats["by_area"].most_common(5):
                print(f"  {area}: {count}")

        elif choice == "10":
            confirm = input("‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –≤–∞–∫–∞–Ω—Å–∏–∏! (y/n): ").strip().lower()
            if confirm == "y":
                manager.clear_all_vacancies()
                print(MESSAGES["all_cleared"])
            else:
                print("–û—Ç–º–µ–Ω–µ–Ω–æ")

        elif choice == "11":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")


if __name__ == "__main__":
    run_cli()
